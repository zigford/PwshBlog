<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>zigford.org</title><link>http://zigford.org/index.html</link>
<description><a href="about.html">About</a><a href="links.html"> | Links</a><a href="scripts.html"> | Scripts</a><br>Sharing linux/windows scripts and tips</br></description><language>en</language>
<lastBuildDate>Tue, 18 Dec 2018 09:47:56 +1000</lastBuildDate>
<pubDate>Tue, 18 Dec 2018 09:47:56 +1000</pubDate>
<atom:link href="http://zigford.org/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Setting Powershell as default on MacOS
</title><description><![CDATA[

<p>When you click on &#8216;Terminal.app&#8217; on a stock MacOS system, your connected to
the systems pseudo TTY which in turn launches your users default shell.</p>

<p>Terminal.app can be told to launch a process other than your users default
shell (eg, powershell), but there are a few cases where if you might want 
to replace your shell system-wide. (eg, sudo can use powershell then)</p>

<hr/>
]]></description><link>http://zigford.org/setting-powershell-as-default-on-macos.html</link>
<guid>http://zigford.org/./setting-powershell-as-default-on-macos.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Tue, 18 Dec 2018 09:44:46 +1000</pubDate></item>
<item><title>
Win32 OpenSSH Package
</title><description><![CDATA[
<h4>Update 20/09/2018</h4>
<p>Updated the script to UseBasicParsing so it works on Server core out of the box.
Also, if you have to allow the port on Windows Firewall:</p>
<p><code>New-NetFirewallRule -DisplayName "Allow SSH" -Direction Inbound -LocalPort 22 -Protocol TCP -Action Allow</code></p>
<h4>Update 11/09/2018</h4>
<p>I've made a copy of this <a href="scripts.html">script</a> which downloads the dependencies (including
PSCore. Also of note, on a machine I ran it on, I had to set the allowed .Net
TLS modes before it would let me download from github.</p>
<p><code>[Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"</code> </p>
<hr />
]]></description><link>http://zigford.org/win32-openssh-package.html</link>
<guid>http://zigford.org/./win32-openssh-package.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Sat, 20 Oct 2018 07:53:58 +1000</pubDate></item>
<item><title>
Gentoo local overlay
</title><description><![CDATA[

<p>I find myself having to create a local overlay to test/develop a new ebuild
without affecting my main system from time to time. I usually fire up a clean
kvm Gentoo guest to start working on, but I've usually forgotten the proceedure</p>

<p>This is a quick instruction on a straight-forward local overlay</p>

<ol>
<li><p>Create the local path tree where the overlay will reside:</p>

<pre><code>mkdir -p /usr/local/portage/overlay/{metadata,profiles}
</code></pre></li>
<li><p>Create the <code>layout.conf</code> file and <code>repo_name</code> file</p>

<pre><code>cd /usr/local/portage/overlay
echo "masters = gentoo" &gt; metadata/layout.conf
echo  "$(hostname)" &gt; profiles/repo_name
</code></pre></li>
<li><p>Create a repos.conf file:</p>

<pre><code>cat &lt;&lt;EOF&gt;/etc/portage/repos.conf/$(hostname).conf
[$(hostname)]
location = /usr/local/portage/overlay
auto-sync = no
priority = 10
EOF
</code></pre></li>
</ol>

<h2>done.</h2>

<p>Now you can begin to populate the local repo with custom ebuilds. I usually do
this and then upload my new ebuild to my <a href="https://github.com/zigford/gentoo-zigford">github</a> repository.</p>

<p>See also:</p>

<p><a href="https://wiki.gentoo.org/wiki//etc/portage/repos.conf">repos.conf</a>, <a href="https://wiki.gentoo.org/wiki/Custom_repository">Custom Repository</a></p>

<p>Tags: <a href='tag_gentoo.html'>gentoo</a>, <a href='tag_portage-overlay.html'>portage-overlay</a></p>

<!-- text end -->
]]></description><link>http://zigford.org/gentoo-local-overlay.html</link>
<guid>http://zigford.org/./gentoo-local-overlay.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Sat, 20 Oct 2018 07:53:58 +1000</pubDate></item>
<item><title>
First look at powershell 6.1.0
</title><description><![CDATA[

<p>Powershell <a href="https://github.com/PowerShell/PowerShell/releases">6.1.0</a> dropped yesterday. Here is my quick look.</p>

<h2>New Commands</h2>

<p><code>Get-Command | Measure-Object</code> on each version:</p>

<p>Version 6.0.4 had 316 commands, while 6.1.0 has 323 commands. Comparing a list
of commands:</p>

<p>On 6.0.4: <code>gcm | select -exp name &gt; 6.0.4.txt</code> and the same on 6.1.0, then to
compare:</p>

<pre><code>    compare-object (gc ./6.0.4.txt) (gc ./6.1.0.txt)

    InputObject             SideIndicator
    -----------             -------------
    ConvertFrom-Markdown    =&gt;
    Get-ExperimentalFeature =&gt;
    Get-MarkdownOption      =&gt;
    Set-MarkdownOption      =&gt;
    Show-Markdown           =&gt;
    Start-ThreadJob         =&gt;
    Test-Connection         =&gt;
    Test-Json               =&gt;
    more                    &lt;=
</code></pre>

<hr />
]]></description><link>http://zigford.org/first-look-at-powershell-610.html</link>
<guid>http://zigford.org/./first-look-at-powershell-610.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Sat, 20 Oct 2018 07:53:58 +1000</pubDate></item>
<item><title>
ANSI VT100 colors in Powershell Core prompt
</title><description><![CDATA[
<p>Sometime ago I was searching the interwebs for inspiration to spruce up my
powershell prompt. I came across someone's prompt they shared on 
<a href="https://stackoverflow.com">stackoverflow</a> or <a href="https://superuser.com">superuser</a> and unfortunatly I could not find the link
again to give proper credit.</p>
<hr />
]]></description><link>http://zigford.org/ansi-vt100-colors-in-powershell-core-prompt.html</link>
<guid>http://zigford.org/./ansi-vt100-colors-in-powershell-core-prompt.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Sat, 20 Oct 2018 07:53:58 +1000</pubDate></item>
<item><title>
About
</title><description><![CDATA[

<p>"Hi, my name is Jesse Harris. I'm a self professed operating systems nerd.
I actively use current versions of <a href="windows.html">Windows</a>, 
<a href="gnu-linux.html">GNU/Linux</a>, <a href="macos.html">Macos</a> and dabble in
<a href="the-bsds.html">the BSDs</a>.</p>

<p>I work for a <a href="https://usc.edu.au">University</a> in the client systems area, where
I do a fair amount of scripting.</p>

<p>Read about:</p>

<ul>
<li><a href="my-setup.html">My setup</a></li>
</ul>

<p>I want to use this site to share my insites about the differences in the
operating systems in an unbiased way."</p>

<!-- text end -->
]]></description><link>http://zigford.org/about-spock-local.html</link>
<guid>http://zigford.org/./about-spock-local.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Mon, 08 Oct 2018 06:13:32 +1000</pubDate></item>
<item><title>
</title><description><![CDATA[
]]></description><link>http://zigford.org/all_posts-spock-local.html</link>
<guid>http://zigford.org/./all_posts-spock-local.html</guid>
<dc:creator></dc:creator>
<pubDate>Mon, 08 Oct 2018 06:13:32 +1000</pubDate></item>
<item><title>
</title><description><![CDATA[
]]></description><link>http://zigford.org/all_tags-spock-local.html</link>
<guid>http://zigford.org/./all_tags-spock-local.html</guid>
<dc:creator></dc:creator>
<pubDate>Mon, 08 Oct 2018 06:13:32 +1000</pubDate></item>
<item><title>
Burning a DVD Video on Gentoo
</title><description><![CDATA[

<p>Quick note for my future self</p>

<h1>Overview</h1>

<ol>
<li>Convert media to dvd compatible format</li>
<li>Author DVD title</li>
<li>Author DVD Table of Contents</li>
<li>Convert DVD folder to ISO</li>
<li>(Optional) Loopback mount ISO and test.</li>
<li>Burn ISO to DVD</li>
</ol>

<h1>Packages Required</h1>

<p>media-video/ffmpeg <br />
media-video/dvdauthor <br />
app-cdr/dvd+rw-tools  </p>

<h1>Commands</h1>

<p>Start by using ffmpeg to convert the media to a dvd compatible format:</p>

<pre><code>        ffmpeg -i Big\ Buck\ Bunny.mp4 -target pal-dvd BigBuckBunny.mpg
</code></pre>

<p>Now use dvdauthor to author a title</p>

<pre><code>        dvdauthor -t -o dvd --video=pal -f BigBuckBunny.mpg
</code></pre>

<p>Add a table of contents</p>

<pre><code>        dvdauthor -T -o dvd
</code></pre>

<p>Create the ISO file</p>

<pre><code>        mkisofs -dvd-video -o BigBuckBunny.iso dvd/
</code></pre>

<p>(Optional) Mount to a loopback for testing</p>

<pre><code>        mkdir mount
        mount -o loop BigBuckBunny.iso mount/
</code></pre>

<p>Play the video using VLC or some other tool to check it, then unmount</p>

<pre><code>        umount mount/
</code></pre>

<p>Burn to a disc</p>

<pre><code>        growisofs -dvd-compat -Z /dev/sr0=BigBuckBunny.iso
</code></pre>

<p>Credit to <a href="https://ubuntuforums.org/showthread.php?t=2121309">andrew.46 over at the ubuntuforums</a></p>

<p>Tags: <a href='tag_burn-a-dvd.html'>burn-a-dvd</a>, <a href='tag_gentoo.html'>gentoo</a>, <a href='tag_ffmpeg.html'>ffmpeg</a>, <a href='tag_linux.html'>linux</a></p>







<!-- text end -->
]]></description><link>http://zigford.org/burning-a-dvd-video-on-gentoo-spock-local.html</link>
<guid>http://zigford.org/./burning-a-dvd-video-on-gentoo-spock-local.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Mon, 08 Oct 2018 06:13:32 +1000</pubDate></item>
<item><title>
Compiling VIM on Ubuntu with WSL
</title><description><![CDATA[
<p>As a Windows Admin by day, but a longtime vim and linux user, I've flocked to
Microsoft's <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">WSL</a>
like a moth to the flame. </p>
<p>Being a heavy vim user with a distaste for tmux (due to the incompatible
keybindings, PS, I know they can be changed to somewhat match vim), I was very
excited to hear about vim's new terminal feature in version 8.1!! I immediatley
installed the latest vim in Windows and it's cool. However I want a matching
linux version in the WSL, so I thought I'd write this quick article on compiling
for Ubuntu 18.04.</p>
<h1>Preperation</h1>
<p>You will need to install a few dev packages and build tools 
before we get started. The WSL file-system isn't known for
it's speed, so do this prep work in the background while doing
something else.</p>
<p><em>Note, this build is doesn't contain any
requiremnts to build with the gui. If your looking for that, 
try <a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source">here</a></em></p>
<p><code>sudo apt-get update sudo apt-get install libncurses5-dev libatk1.0-dev python3-dev ruby-dev lua5.3-0 lua5.3-dev libperl-dev git build-essential</code></p>
<p>Clone the vim source tree </p>
<p><code>mkdir src cd src git clone https://github.com/vim/vim</code></p>
<p>Configure the source </p>
<p><code>./configure --with-compiledby="${USER}@$(hostname)" --enable-terminal --enable-python3interp --enable-perlinterp --enable-luainterp --disable-gui make</code></p>
<p>Install vim </p>
<p><code>sudo make install</code></p>
<p>Now go off into the sunset and happily vim.</p>









<!-- text end -->
]]></description><link>http://zigford.org/compiling-vim-on-ubuntu-with-wsl-spock-local.html</link>
<guid>http://zigford.org/./compiling-vim-on-ubuntu-with-wsl-spock-local.html</guid>
<dc:creator>Jesse Harris</dc:creator>
<pubDate>Mon, 08 Oct 2018 06:13:32 +1000</pubDate></item>
</channel></rss>
